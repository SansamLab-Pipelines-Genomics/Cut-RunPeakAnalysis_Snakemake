configfile: "config/config.yml"


##################################################################
##                       import modules                         ##
##################################################################

import pandas as pd
import re
import common_functions as cf

##################################################################
##                read and modify samples table                 ##
##################################################################

# this reads the CSV file and sets an index using the values in the sample column.
samples_table = pd.read_csv(config["samples_csv"]).set_index("sample", drop=False)
samples_table = samples_table.applymap(str)
samples_table_w_merged_suffix = cf.add_merge_suffix_to_merged_samples(samples_table)


##################################################################
##                           rules                              ##
##################################################################


# to run snakemake without explicitly requesting any output files on the command line, we must request output files in the first rule. Therefore we include this otherwise useless rule here
rule all:
    input:
        expand(
            f"results/profile_plots/{{sample}}_{str(config['downsample_read_number'])}.png",
            sample=cf.make_all_treatments_table(samples_table_w_merged_suffix)[
                "sample"
            ].to_list(),
        ),
        
        
rule trim_reads_with_trimmomatic:
    input:
        unpack(
            lambda wildcards: {
                "fq1": samples_table.loc[wildcards.sample, "fastq1"],
                "fq2": samples_table.loc[wildcards.sample, "fastq2"],
            }
        ),  # <--- we need to wrap our input function inside a special Snakemake function called unpack() which turns the dict into a collection of named inputs
    output:
        trimmed1=temp("results/trimmed/{sample}_trimmomatic_R1.fastq.gz"),
        trimmed2=temp("results/trimmed/{sample}_trimmomatic_R2.fastq.gz"),
        orphaned1=temp("results/trimmed/{sample}_trimmomatic_orphaned_R1.fastq.gz"),
        orphaned2=temp("results/trimmed/{sample}_trimmomatic_orphaned_R2.fastq.gz"),
    params:
        trimmomatic_threads=config["trimmomatic_threads"],
        trimmomatic_adapterfile=config["trimmomatic_adapterfile"],
    conda:
        "envs/trim_reads_with_trimmomatic.yml"
    envmodules:
        config["trimmomatic"]
    log:
        "results/logs/snakelogs/trim_reads_with_trimmomatic.{sample}.log",
    wildcard_constraints:
        sample="((?!_merged).)*",
    shell:
        """
        trimmomatic PE -threads {params.trimmomatic_threads} {input.fq1} {input.fq2} {output.trimmed1} {output.orphaned1} {output.trimmed2} {output.orphaned2} ILLUMINACLIP:{params.trimmomatic_adapterfile}:2:15:4:4:true LEADING:20 TRAILING:20 SLIDINGWINDOW:4:15 MINLEN:25
        """


rule trim_reads_with_cutadapt:
    input:
        R1="results/trimmed/{sample}_trimmomatic_R1.fastq.gz",
        R2="results/trimmed/{sample}_trimmomatic_R2.fastq.gz",
    output:
        trimmed1=temp("results/trimmed/{sample}_trimmed_R1.fastq.gz"),
        trimmed2=temp("results/trimmed/{sample}_trimmed_R2.fastq.gz"),
    params:
        cutadapt_adapterfile=config["cutadapt_adapterfile"],
    conda:
        "envs/trim_reads_with_cutadapt.yml"
    envmodules:
        config["cutadapt"]
    log:
        "results/logs/snakelogs/trim_reads_with_cutadapt.{sample}.log",
    wildcard_constraints:
        sample="((?!_merged).)*",
    shell:
        """
        cutadapt --json {log} --cores=0 -a file:{params.cutadapt_adapterfile} -A file:{params.cutadapt_adapterfile} -a G{{100}} -A G{{100}} --minimum-length 25 --quality-cutoff 20,20 -e 0.2 --output {output.trimmed1} --paired-output {output.trimmed2} {input.R1} {input.R2}
        """


rule align_reads_with_bowtie2:
    input:
        R1="results/trimmed/{sample}_trimmed_R1.fastq.gz",
        R2="results/trimmed/{sample}_trimmed_R2.fastq.gz",
    params:
        bowtie2_genome=config["bowtie2_genome"],
        bowtie2_threads=config["bowtie2_threads"],
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
    output:
        bam="results/aligned/{sample}.bam",
        bai="results/aligned/{sample}.bam.bai",
    wildcard_constraints:
        sample="((?!_merged).)*",
    conda:
        "envs/align_reads_with_bowtie2.yml"
    envmodules:
        config["bowtie2"],
        config["samtools"],
    log:
        "results/logs/snakelogs/align_reads_with_bowtie2.{sample}.log",
    shell:
        """
        bowtie2 --met-file {log} --threads {params.bowtie2_threads} --dovetail --phred33 --maxins 2000 -x {params.bowtie2_genome} -1 {input.R1} -2 {input.R2} | samtools view -b - | samtools sort --threads {params.bowtie2_samtools_threads} - -o {output.bam}
        samtools index {output.bam}
        """
        
        
rule quality_filter_aligned_reads:
    input:
        bam="results/aligned/{sample}.bam",
    output:
        bam="results/aligned_and_filtered/{sample}.bam",
        bai="results/aligned_and_filtered/{sample}.bam.bai"
    params:
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
        flag=config["samtools_filter_flag"],
    wildcard_constraints:
        sample="((?!_merged).)*",
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    shell:
        """
        samtools view -h --threads {params.bowtie2_samtools_threads} -b -q 10 -F {params.flag} {input.bam} > {output.bam}
        samtools index {output.bam}
        """
        

rule merge_replicates:
    input:
        expand(
            "results/aligned_and_filtered/{sample}.bam",
            sample=cf.make_samples_to_merge_list(samples_table_w_merged_suffix),
        ),
    output:
        bam="results/aligned_and_filtered/{sample}.bam",
        bai="results/aligned_and_filtered/{sample}.bam.bai",
    params:
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
        inputs=lambda wildcards: cf.make_bams_to_merge_dict(
            cf.keywords_to_merge(samples_table_w_merged_suffix),
            samples_table_w_merged_suffix,
        )[wildcards.sample],
    wildcard_constraints:
        sample=".*_merged.*",
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    shell:
        """
        samtools merge -o {output.bam} --threads {params.bowtie2_samtools_threads} {params.inputs}
        samtools index {output.bam}
        """

rule downsample_bam:
    input:
        bam="results/aligned_and_filtered/{sample}.bam",
    output:
        bam=f"results/aligned_downsampled/{{sample}}_{str(config['downsample_read_number'])}.bam",
        bai=f"results/aligned_downsampled/{{sample}}_{str(config['downsample_read_number'])}.bam.bai",
    params:
        ds_num=config["downsample_read_number"],
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    log:
        "results/logs/snakelogs/downsample_bam.{sample}.log",
    shell:
        """
        if [ "{params.ds_num}" -eq "0" ]; then
            cp {input.bam} {output.bam}
        else
            fraction=$(samtools idxstats {input.bam} | cut -f3 | awk -v ct={params.ds_num} 'BEGIN {{total=0}} {{total += $1}} END {{print ct/total}}')
            samtools view -b -s ${{fraction}} {input.bam} > {output.bam}
        fi
        samtools index {output.bam}
        """

rule get_species_of_interest_reads:
    input:
        bam=f"results/aligned_downsampled/{{sample}}_{str(config['downsample_read_number'])}.bam",
    output:
        bam=f"results/aligned_speciesOfInterest/{{sample}}_{str(config['downsample_read_number'])}.bam",
    params:
        chromosomeSizes=f"resources/chromosome_sizes/{str(config['genome_of_interest'])}.chrom.sizes",
        bowtie2_samtools_threads=config["bowtie2_samtools_threads"],
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    log:
        "results/logs/snakelogs/get_species_of_interest_reads.{sample}.log",
    shell:
        """
        awk -F '\t' '{{ print $1,"1",$2 }}' OFS='\t' {params.chromosomeSizes} > {output.bam}tmp.bed
        samtools view --threads {params.bowtie2_samtools_threads} -bS -ML {output.bam}tmp.bed {input.bam} > {output.bam}
        samtools index {output.bam}
        echo "Number of species-of-interest reads:" > {log}
        samtools view --threads {params.bowtie2_samtools_threads} -c {output.bam} >> {log}
        rm {output.bam}tmp.bed
        """

rule make_bigwigs_no_spikein:
    input:
        bam=f"results/aligned_speciesOfInterest/{{sample}}_{str(config['downsample_read_number'])}.bam",
        bai=f"results/aligned_speciesOfInterest/{{sample}}_{str(config['downsample_read_number'])}.bai",
    output:
        bw=f"results/aligned_downsampled_bigwigs/{{sample}}_{str(config['downsample_read_number'])}.bw",
    params:
        gs=config["effective_genome_size"],
        bs=config["bamCoverage_binSize"],
        bl=config["blacklist_file"],
    conda:
        "envs/deeptools.yml"
    envmodules:
        config["deeptools"]
    log:
        "results/logs/snakelogs/make_bigwigs_no_spikein_{sample}.log",
    shell:
        """
        mkdir -p results/aligned_downsampled_bigwigs
        bamCoverage --version > {log}
        bamCoverage -b {input.bam} -o {output.bw} --effectiveGenomeSize {params.gs} --binSize {params.bs} --numberOfProcessors max --verbose --blackListFileName {params.bl} --centerReads
        """

rule calculate_spikein_scale_factors:
    input:
        bam=f"results/aligned_downsampled/{{sample}}_{str(config['downsample_read_number'])}.bam",
    output:
        report(f"results/scale_factors/{{sample}}_scaleFactor_{str(config['downsample_read_number'])}.txt"),
    params:
        px=config["spike_in_chrom_prefix"],
    conda:
        "envs/samtools.yml"
    envmodules:
        config["samtools"]
    shell:
        """
        total_counts=$(samtools idxstats {input.bam} | awk -F'\t' '{{sum+=$3;}} END{{print sum;}}')
        spike_in_counts=$(samtools idxstats {input.bam} | grep {params.px} | awk -F'\t' '{{sum+=$3;}} END{{print sum;}}')
        spike_in_percentage=$(echo "scale=3; $spike_in_counts/$total_counts*100" | bc )
        scale_factor=$(echo "scale=8; 1000000/$spike_in_counts" | bc )
        echo "bam file:  {input.bam}" > {output}_tmp
        echo "total counts = ${{total_counts}}" >> {output}_tmp
        echo "spike in read counts = ${{spike_in_counts}}" >> {output}_tmp
        echo "spike in percentage = ${{spike_in_percentage}}" >> {output}_tmp
        printf "scale factor = ""%-20.8f\\n" "${{scale_factor}}" >> {output}_tmp
        mv {output}_tmp {output}
        """

rule make_bigwigs_with_spikein:
    input:
        scale=f"results/scale_factors/{{sample}}_scaleFactor_{str(config['downsample_read_number'])}.txt",
        bam=f"results/aligned_speciesOfInterest/{{sample}}_{str(config['downsample_read_number'])}.bam",
    output:
        bw=f"results/bigwigs_spikein/{{sample}}_{str(config['spike_in_chrom_prefix'])}_{str(config['downsample_read_number'])}.bw"
    params:
        gs=config["effective_genome_size"],
        bs=config["bamCoverage_binSize"],
        bl=config["blacklist_file"],
        px=config["spike_in_chrom_prefix"],
    conda:
        "envs/deeptools.yml"
    envmodules:
        config["deeptools"]
    log:
        "results/logs/snakelogs/make_bigwigs_with_spikein_{sample}.log",
    shell:
        """
        bamCoverage --version > {log}
        scale_factor=$(grep scale {input.scale} | sed 's/scale factor = //g')
        bamCoverage -b {input.bam} -o {output.bw} --effectiveGenomeSize {params.gs} --binSize {params.bs} --numberOfProcessors max --verbose --blackListFileName {params.bl} --centerReads --scaleFactor ${{scale_factor}}
        """

rule computeMatrix:
    input:
        unpack(
            lambda wildcards: {
                "treatment": f"results/bigwigs_spikein/{cf.make_all_treatments_table(samples_table_w_merged_suffix).loc[wildcards.sample, 'sample']}_{str(config['spike_in_chrom_prefix'])}_{str(config['downsample_read_number'])}.bw",
                "control": f"results/bigwigs_spikein/{cf.make_all_treatments_table(samples_table_w_merged_suffix).loc[wildcards.sample, 'Control']}_{str(config['spike_in_chrom_prefix'])}_{str(config['downsample_read_number'])}.bw",
            }
        ),
    output:
        matrix=f"results/downsampled_matrix/{{sample}}_{str(config['downsample_read_number'])}.gz",
        tab=f"results/downsampled_tab/{{sample}}_{str(config['downsample_read_number'])}.tab",
    params:
        peaks=config["peaks_to_plot_coverage"],
        bp=config["bp_around_peak_center"]
    conda:
        "envs/deeptools.yml"
    envmodules:
        config["deeptools"]
    log:
        "results/logs/snakelogs/downsample_bam.{sample}.log",
    shell:
        """
        mkdir -p results/downsampled_matrix
        computeMatrix reference-point --numberOfProcessors 'max' --referencePoint 'center' -a {params.bp} -b {params.bp} --averageTypeBins 'sum' -S {input.treatment} {input.control} -R {params.peaks} --outFileName {output.matrix} --outFileNameMatrix {output.tab}
        """

rule plotProfile:
    input:
        matrix=f"results/downsampled_matrix/{{sample}}_{str(config['downsample_read_number'])}.gz",
    output:
        png=f"results/profile_plots/{{sample}}_{str(config['downsample_read_number'])}.png",
    conda:
        "envs/deeptools.yml"
    envmodules:
        config["deeptools"]
    log:
        "results/logs/snakelogs/downsample_bam.{sample}.log",
    shell:
        """
        mkdir -p results/profile_plots
        plotProfile -m {input.matrix} --outFileName {output.png} --perGroup
        """
